name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Validate version format
      run: |
        if [[ ! "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "ERROR: Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta)"
          exit 1
        fi
        
    - name: Check if tag exists
      run: |
        if git rev-parse "v${{ inputs.version }}" >/dev/null 2>&1; then
          echo "ERROR: Tag v${{ inputs.version }} already exists"
          exit 1
        fi
        
    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ inputs.version }}"/' pyproject.toml
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "Changes since $LAST_TAG:" > RELEASE_NOTES.md
          git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "Initial release" > RELEASE_NOTES.md
          echo "- First public release of invokeai-py-client" >> RELEASE_NOTES.md
        fi
        
        # Set output for release notes
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "bump: version ${{ inputs.version }}"
        git push
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ inputs.version }}
        release_name: Release v${{ inputs.version }}
        body: ${{ steps.changelog.outputs.notes }}
        draft: false
        prerelease: ${{ inputs.prerelease }}
