name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          python -m build
      - name: Verify version == tag
        shell: bash
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          TAG=${TAG#v}
          VERSION=$(python - <<'PY'
import tomllib, pathlib
print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])
PY
)
          echo "Tag: $TAG  Version: $VERSION"
          test "$TAG" = "$VERSION" || { echo "Mismatch"; exit 1; }
      - name: Publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag (vX.Y.Z) to publish'
        required: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.tag }}" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          TAG=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using tag $TAG"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Verify version
        run: |
          VERSION=$(python - <<'PY'
import tomllib, pathlib
print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])
PY
)
          echo "pyproject version: $VERSION"
          echo "tag version: ${{ steps.tag.outputs.tag }}"
          test "$VERSION" = "${{ steps.tag.outputs.tag }}" || { echo 'Version mismatch'; exit 1; }

      - name: Build
        run: python -m build

      - name: Check
        run: python -m twine check dist/*

      - name: Publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Summary
        run: |
          echo "Published invokeai-py-client ${{ steps.tag.outputs.tag }}"
