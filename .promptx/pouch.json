{
  "currentState": "memory_saved",
  "stateHistory": [
    {
      "from": "initial",
      "command": "init",
      "timestamp": "2025-08-11T14:42:18.081Z",
      "args": [
        {
          "workingDirectory": "D:\\code\\invokeai-py-client",
          "ideType": "cursor"
        }
      ]
    },
    {
      "from": "initialized",
      "command": "action",
      "timestamp": "2025-08-11T14:45:26.930Z",
      "args": [
        "webapi-expert"
      ]
    },
    {
      "from": "role_activated_with_memory",
      "command": "learn",
      "timestamp": "2025-08-11T14:48:12.017Z",
      "args": [
        "@project://context/hints/invokeai-kb/howto-find-invokeai-workflow-schema.md"
      ]
    },
    {
      "from": "learn_error",
      "command": "remember",
      "timestamp": "2025-08-11T14:48:26.412Z",
      "args": [
        "webapi-expert",
        "InvokeAI workflow schema discovery methods for Python client development:\n\n1. **OpenAPI Schema Endpoint**: curl http://localhost:9090/openapi.json provides complete node definitions, field constraints, validation rules, and default values\n\n2. **Key jq Commands for Schema Analysis**:\n   - Find node schema: `jq --arg type \"NODE_TYPE\" '.components.schemas | to_entries | map(select(.value.properties.type.default == $type)) | .[0].value' openapi.json`\n   - List input fields: `jq --arg type \"NODE_TYPE\" '.components.schemas | to_entries | map(select(.value.properties.type.default == $type)) | .[0].value.properties | to_entries[] | select(.value.field_kind == \"input\") | .key' openapi.json`\n   - Extract required fields: `jq '.components.schemas | to_entries | map(select(.value.properties.type.default == \"NODE_TYPE\")) | .[0].value.properties | to_entries[] | select(.value.orig_required == true) | .key' openapi.json`\n\n3. **Common Field Types for Client Models**:\n   - ImageField: `{\"image_name\": \"uuid.png\"}`\n   - LatentsField: `{\"latents_name\": \"uuid\"}`\n   - ModelField: `{\"key\": \"model-id\", \"hash\": \"...\", \"name\": \"model-name\", \"base\": \"sdxl\", \"type\": \"main\"}`\n   - Basic types: StringField, IntegerField, FloatField, BooleanField with validation constraints (ge, le, gt, lt)\n\n4. **Workflow Structure (v3.0.0)**: Essential components are nodes[] array with {id, type, data: {type, inputs, version, nodePack}}, edges[] array connecting nodes via sourceHandle/targetHandle, and meta.version for schema compatibility\n\n5. **Source Discovery**: Use `grep -r \"@invocation.*\\\"NODE_TYPE\\\"\" invokeai/app/invocations/` to find Python implementation files for understanding node behavior\n\nReference: context/hints/invokeai-kb/howto-find-invokeai-workflow-schema.md",
        "--tags",
        "invokeai workflow schema discovery python-client jq-commands field-types"
      ]
    },
    {
      "from": "memory_saved",
      "command": "remember",
      "timestamp": "2025-08-11T15:23:11.964Z",
      "args": [
        "webapi-expert",
        "Created comprehensive InvokeAI workflow input types documentation with 60+ field types identified from source code analysis:\n\n**Core Documentation**: `about-invokeai-workflow-input-types.md` covers:\n- 9 primitive types (int, float, bool, str, ColorField, BoundingBoxField, etc.)\n- 8 resource reference types (ImageField, LatentsField, TensorField, etc.)\n- 8 conditioning types for different model architectures (FLUX, SD3, CogView4)\n- 12+ model reference types (ModelIdentifierField, UNetField, CLIPField, etc.)\n- Collection types (list[T] for all supported types)\n- Enum/Literal types and UI configuration fields\n- Advanced features: connection types, validation constraints, mixins\n\n**Implementation Guide**: `howto-implement-invokeai-workflow-fields.md` provides:\n- Pydantic model patterns for client-side field validation\n- Node input builders with fluent API\n- Type-safe field validators and OpenAPI schema integration\n- Complete workflow construction examples (txt2img, img2img+ControlNet)\n- Connection graph utilities and dependency resolution\n- Error handling patterns and comprehensive test examples\n\n**Key Source Files Analyzed**:\n- `fields.py` - Field type definitions\n- `baseinvocation.py` - Base classes and decorators\n- `primitives.py` - Basic input/output types\n- `model.py` - Model reference types\n- 50+ invocation files - Usage patterns and validation rules\n\nReference location: context/hints/invokeai-kb/",
        "--tags",
        "invokeai workflow-fields python-client field-types documentation"
      ]
    }
  ],
  "lastUpdated": "2025-08-11T15:23:11.968Z"
}
