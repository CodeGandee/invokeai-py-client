<?xml version="1.0" encoding="UTF-8"?>
<memory>
  <item id="mem_1754764473772_83tcz0ewn" time="2025/08/10 02:34">
    <content>
      I have a set of powerful CLI tools for web API analysis and automation. These include: curl for making HTTP requests, jq for JSON processing, httpie as a user-friendly curl alternative, Node.js for running JavaScript tools, Playwright and Puppeteer for browser automation, mitmproxy for inspecting HTTPS traffic, shot-scraper for taking website screenshots, and yq for processing YAML files. The documentation for these tools is available in &#x27;context/hints/howto-use-webapi-tools.md&#x27;.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754764750429_mrjec5nih" time="2025/08/10 02:39">
    <content>
      To get JS-rendered pages, I will use the `shot-scraper` tool, specifically the `html` or `javascript` commands. I must remember to wait for at least 5 seconds (`--wait 5000`) to ensure the page has fully loaded all dynamic content. I should also be aware of Content Security Policy (CSP) and use the `--bypass-csp` flag if needed. The full instructions are in `context/hints/howto-use-shot-scraper-for-js-rendered-content.md`.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754772295825_1o1ha1q8n" time="2025/08/10 04:44">
    <content>
      InvokeAI Boards API solution: To get board names, use GET /api/v1/boards/?all=true which returns a JSON array of board objects. Each board has a &#x27;board_name&#x27; field that contains the name. The API supports pagination with offset/limit, but using all=true gets everything at once. Other useful fields include board_id, image_count, created_at, and cover_image_name. The API is running on localhost:9090 in this project.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754772483945_pkk212495" time="2025/08/10 04:48">
    <content>
      InvokeAI API exploration project rules: 1) DO NOT create scripts in workspace root, 2) DO NOT modify task files, 3) If API exploration is successful, create demos in context/examples/api-demo-&lt;what-api&gt;.py. Successfully completed Task 1 (get board names) using GET /api/v1/boards/?all=true and created proper demo at context/examples/api-demo-boards.py showing how to extract board_name fields from the JSON response.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754772655572_gyrzcg18r" time="2025/08/10 04:50">
    <content>
      Enhanced InvokeAI boards API with uncategorized images: Use GET /api/v1/boards/none/image_names to get uncategorized images (images not assigned to any board). The &#x27;none&#x27; keyword is a special board_id for uncategorized content. Updated api-demo-boards.py to include comprehensive overview showing total image counts across boards (73 images) and uncategorized (470 images) for total of 543 images. This provides complete visibility into all images in the InvokeAI system.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754772751952_ci3sg5btx" time="2025/08/10 04:52">
    <content>
      Moved InvokeAI boards API demo to correct location: examples/api-demo-boards.py (moved from context/examples/). The demo works perfectly from the new location and includes full boards functionality with uncategorized images support. File organization follows project structure with API demos in the root examples/ directory rather than context/examples/.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754773163373_efwsmgu59" time="2025/08/10 04:59">
    <content>
      Task 2 completed: InvokeAI latest image download from board. Key API endpoints: GET /api/v1/images/names?board_id={id}&amp;order_dir=DESC gets ordered image names (most recent first), GET /api/v1/images/i/{name}/metadata gets generation details, GET /api/v1/images/i/{name}/full downloads full resolution image. Successfully downloaded latest image from &#x27;probe&#x27; board (ad7ae269-135e-4432-ac9a-db349cae64d2.png, 1.83MB, SDXL txt2img) to ./tmp/downloads/. API response format: {image_names: [string], total_count: int, starred_count: int}.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754773327802_rdmwxhwmh" time="2025/08/10 05:02">
    <content>
      Corrected Task 2: InvokeAI latest image detection requires actual timestamp sorting, not board ordering. Critical fix: Use POST /api/v1/images/images_by_names with all board image names to get ImageDTOs containing created_at timestamps, then sort by created_at desc. Board image ordering via GET /api/v1/images/names is NOT chronological. True latest: d5ecea7e-a8ad-4a41-814c-0100c191adaa.png (2025-08-09 20:56:35.827) vs previous ad7ae269... which was NOT the latest by timestamp.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754773620373_05op8nsxc" time="2025/08/10 05:07">
    <content>
      InvokeAI starred images from board: Use GET /api/v1/boards/{board_id}/image_names to get all images, then POST /api/v1/images/images_by_names to get ImageDTOs, filter by starred=true field. Found 2 starred images in probe board: ad7ae269-135e-4432-ac9a-db349cae64d2.png (2025-08-09 19:40:52.348) and 0ab4c196-f00f-449b-8936-82a76c10167c.png (2025-08-09 15:45:57.219). Created api-demo-starred-images.py with download functionality and get-starred-from-probe.py for simple listing.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754913107721_3bf7tuh3t" time="2025/08/11 19:51">
    <content>
      Task 5 completed: InvokeAI image upload to board. Key API: POST /api/v1/images/upload with multipart/form-data. Required params: image_category=&#x27;user&#x27;, is_intermediate=false, board_id={target_board_id}. Form data includes &#x27;file&#x27; field with binary image data. Successfully uploaded data/images/ad7ae269-135e-4432-ac9a-db349cae64d2.png (1.83MB, 960x1280) to &#x27;samples&#x27; board (d32f49b7-370e-4bab-8cfd-cf81fcf4c3a8). Returns ImageDTO with new image_name. Created api-demo-upload-image.py with board creation, upload, and verification functionality.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754916383145_t0f3eq6p9" time="2025/08/11 20:46">
    <content>
      Created comprehensive InvokeAI workflow schema guide at context/hints/howto-use-invokeai-workflow-schema.md. Document covers complete workflow JSON structure (v3.0.0), node/edge schemas, field types (StringField, ImageField, etc.), core invocation categories (SDXL, FLUX, image processing, ControlNet), custom node development patterns, InvocationContext services, and common workflow patterns. Based on deep analysis of InvokeAI source code, TypeScript schemas, Python invocation classes, and official documentation. Guide includes practical examples for custom nodes, field validation, and troubleshooting.
    </content>
    <tags>#其他</tags>
  </item>
  <item id="mem_1754916512287_hx1hel8vq" time="2025/08/11 20:48">
    <content>
      Enhanced InvokeAI workflow schema guide with comprehensive &quot;Discovering Node Schemas&quot; section. Added 6 methods for finding node JSON schemas: 1) OpenAPI endpoint (http://localhost:9090/openapi.json), 2) Schema analysis workflow with component navigation, 3) Runtime schema discovery via Python API calls, 4) Source code analysis in invokeai/app/invocations/, 5) Workflow inspection of existing JSON files, 6) Frontend node template generation patterns. Included practical examples for SDXL model loader, jq commands for schema queries, and best practices for schema discovery and validation.
    </content>
    <tags>#其他</tags>
  </item>
</memory>